#include "Arduino.h"        // Biblioth√®que de base pour l‚ÄôESP32 (fonctions Arduino)
#include "PubSubClient.h"   // G√®re la communication MQTT (publish/subscribe)
#include "WiFi.h"           // Permet la connexion r√©seau (WiFi classique)
#include "esp_wpa2.h"       // Sp√©cifique √† la connexion Eduroam (authentification EAP)
#include "HX711.h"          // Biblioth√®que du capteur de poids HX711 (ADC 24 bits)




//Configuration du protocole MQTT


// Adresse IP du broker de l‚ÄôIUT
const char *mqtt_broker = "172.23.28.132"; //char (character) : langage C, stocke un caract√®re, ici l'adresse IP constante
const int mqtt_port = 1883;


// Topics utilis√©s pour la communication JSON
const char *topic_pub = "balance/masse"; // Publication des mesures
const char *topic_tare = "balance/tare"; // R√©ception d'une commande de tare
const char *topic_mode = "balance/mode"; // R√©ception du mode m√©trologique ("certificat" ou "constat")


// D√©claration des objets pour g√©rer la communication
WiFiClient espClient;          // Objet client WiFi
PubSubClient client(espClient); // Client MQTT bas√© sur la connexion WiFi




//Configuration du Wi-Fi Eduroam


#define EAP_IDENTITY "titouan.gardy-lognon@etu.univ-amu.fr" // Identifiant Eduroam
#define EAP_PASSWORD "**********"                           // Mot de passe Eduroam
#define EAP_USERNAME "titouan.gardy-lognon@etu.univ-amu.fr" // Nom d‚Äôutilisateur complet
const char *ssid = "eduroam";                               // Nom du r√©seau utilis√©




//Configuration du capteur et du bouton tare


#define LOADCELL_DOUT_PIN 19  // Pin DATA du HX711
#define LOADCELL_SCK_PIN 21   // Pin CLOCK du HX711
#define TARE_BUTTON_PIN 0     // Pin du bouton BOOT utilis√©e pour la tare manuelle


HX711 scale;                  // Cr√©ation d‚Äôun objet HX711
long tare_offset = 0;         // Offset de tare m√©moris√©




//D√©finition M√©trologie


String mode_incert = "certificat"; // Mode d‚Äô√©valuation de l‚Äôincertitude (modifiable par Node-Red)
float uj, uf, ur, um, U;           // Noms des incertitudes
float uj2, uf2, ur2;               // Carr√©s des incertitudes
float resolution = 0.001;          // R√©solution de la balance (1 mg)
float u_etalon = 0.001;            // Incertitude-type de l‚Äô√©talon
float EMT = 0.001;                 // Erreur maximale tol√©r√©e pour le constat




//Fonction de tare


void effectuerTare() {
  Serial.println("Tare en cours...");
  scale.tare();                    // R√©initialise la valeur moyenne √† z√©ro
  tare_offset = scale.read_average(20); // Sauvegarde de la valeur moyenne (pour affichage/debug)
  Serial.println("Tare effectu√©e");
}


//MQTT (r√©ception des messages)


void callback(char *topic, byte *payload, unsigned int length) { //nom du topic; contenu du message (tableau d'octets); taille du message re√ßu
  payload[length] = '\0';              // Ajoute le caract√®re de fin de cha√Æne du C et C++
  String message = String((char *)payload); // Convertit le tableau d'octets "payload" en cha√Æne string lisible


  // Commande de tare re√ßue, deux conditions : message vient bien du topic ‚Äúbalance/tare‚Äù et commande envoy√©e par Node-Red active
  if (String(topic) == topic_tare && message == "1") {
    effectuerTare(); //si condition satisfaite
  }


  // Changement de mode d‚Äôincertitude ("certificat" ou "constat")
  if (String(topic) == topic_mode) {                                    //message vient du topic "balance/mode"
    if (message == "certificat" || message == "constat") {             //Deux cas accept√©s (II = OU logique)
      mode_incert = message;                                          //enregistre le mode s√©lectionn√© dans une variable globale mode_incert
      Serial.printf("üßæ Mode incertitude chang√© : %s\n", mode_incert.c_str());    //%s = string ; mode_incert.c_str() convertit la variable String en cha√Æne C (char *) pour √™tre compatible avec printf
    }
  }
}


//Reconnexion automatique au broker MQTT


void reconnect() {
  while (!client.connected()) {                         //Tant que le client MQTT n‚Äôest pas connect√© on ex√©cute le bloc √† l‚Äôint√©rieur
    String cid = "esp32-balance-" + WiFi.macAddress(); // ID unique bas√© sur la MAC
    Serial.print("Connexion MQTT...");
    if (client.connect(cid.c_str())) {                  // Tentative de connexion
      Serial.println(" ‚úÖ");
      client.subscribe(topic_tare); // S‚Äôabonne aux commandes de tare
      client.subscribe(topic_mode); // S‚Äôabonne aux changements de mode
    } else {
      Serial.print("√âchec MQTT (code ");
      Serial.print(client.state());
      Serial.println(")");
      delay(2000); // Attente avant de r√©essayer
    }
  }
}


//SETUP


void setup() {
  Serial.begin(115200); // D√©marrage de la communication s√©rie
  delay(500);
  Serial.println("\n=== Initialisation de la balance HX711 ===");


  // Configuration des broches
  pinMode(TARE_BUTTON_PIN, INPUT_PULLUP);
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);


  // Attente que le HX711 soit pr√™t
  Serial.print("Attente HX711...");
  while (!scale.is_ready()) {
    delay(100);
    Serial.print(".");
  }
  Serial.println(" ‚úÖ");


  scale.set_scale(1079.0); // Facteur d‚Äô√©talonnage (d√©termin√© exp√©rimentalement)
  effectuerTare();         // Tare automatique au d√©marrage


  // --- Connexion au r√©seau WiFi Eduroam ---
  WiFi.disconnect(true);                    //coupe toute connexion Wi-Fi existante pour en √©tablir une nouvelle
  WiFi.begin(ssid, WPA2_AUTH_PEAP, EAP_IDENTITY, EAP_USERNAME, EAP_PASSWORD);     //connexion au r√©seau Eduroam
  Serial.print("Connexion √† Eduroam...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);           //Progression de la
    Serial.print(".");   //    connexion
  }
  Serial.println("\n‚úÖ Wi-Fi connect√© !");
  Serial.print("IP : ");
  Serial.println(WiFi.localIP());


  // --- Configuration MQTT ---
  client.setServer(mqtt_broker, mqtt_port);
  client.setCallback(callback);
  reconnect();


  Serial.println("Balance pr√™te");
}




//Boucle principale : mesure et envoi




void loop() {
  if (!client.connected()) reconnect(); // V√©rifie la connexion MQTT
  client.loop();                        // G√®re les messages entrants


  // --- Tare manuelle (bouton BOOT) ---
  if (digitalRead(TARE_BUTTON_PIN) == LOW) {      //quand bouton appuy√©, pin lit LOW
    effectuerTare();
    delay(1000);
  }


  // --- Lecture et traitement des mesures ---
  if (scale.is_ready()) {
    const int N = 10;       // Nombre de mesures pour la moyenne
    float somme = 0;
    float mesures[N];


    // Moyenne sur N mesures pour r√©duire le bruit
    for (int i = 0; i < N; i++) {     //r√©p√®te N fois avec N le nombre de mesures √† effectuer
      mesures[i] = scale.get_units(1); //(1) indique qu‚Äôon fait la moyenne sur une seule lecture brute (valeur instantan√©e)
      somme += mesures[i]; //on ajoute la valeur mesur√©e √† la somme totale
      delay(20);
    }


    float moyenne = somme / N;




    // CALCUL DES INCERTITUDES M√âTROLOGIQUES


    // --- √âcart-type exp√©rimental (fid√©lit√©)
    float variance = 0;
    for (int i = 0; i < N; i++) variance += pow(mesures[i] - moyenne, 2);   // pour chaque mesure: calcul √©cart √† la moyenne, met au carr√©, ajoute le r√©sultat √† la somme variance
    variance /= (N - 1);                                                   //formule variance experimentale (Bessel)
    float ecart_type = sqrt(variance);                                    //racine carr√©e de la variance pour obtenir l‚Äô√©cart-type


    // --- u_f : incertitude de r√©p√©tabilit√© (fid√©lit√©)
    uf = ecart_type / sqrt(N);
    uf2 = pow(uf, 2);


    // --- u_r : incertitude li√©e √† la r√©solution de la balance
    ur = resolution / (2 * sqrt(3));
    ur2 = pow(ur, 2);


    // --- u_j : incertitude-type globale selon la plage et le mode s√©lectionn√©
    if (mode_incert == "certificat") {


      // Valeurs extraites du certificat d‚Äô√©talonnage
      if (moyenne <= 1) uj = 0.0069551;
      else if (moyenne <= 2) uj = 0.00695548/2;
      else if (moyenne <= 5) uj = 0.00695756/2;
      else if (moyenne <= 10) uj = 0.00696478/2;
      else if (moyenne <= 20) uj = 0.00699289/2;
      else if (moyenne <= 50) uj = 0.00718447/2;
      else if (moyenne <= 100) uj = 0.00782788/2;
      else uj = 0.01001084;
    } else { // Mode constat de v√©rification


      // Valeurs issues du constat de v√©rification
      if (moyenne <= 1) uj = 0.05783966;
      else if (moyenne <= 2) uj = 0.06936926;
      else if (moyenne <= 5) uj = 0.08667238;
      else if (moyenne <= 10) uj = 0.11552254;
      else if (moyenne <= 20) uj = 0.1443799;
      else if (moyenne <= 50) uj = 0.17324231;
      else if (moyenne <= 100) uj = 0.28870167;
      else uj = 0.57737192;
    }
    uj2 = pow(uj, 2);


    // --- Calcul final de u_m et U (incertitude √©largie)
    if (mode_incert == "certificat") {
      // u_m = ‚àö(u_f¬≤ + u_j¬≤ + u_etalon¬≤ + u_r¬≤)
      um = sqrt(uf2 + uj2 + pow(u_etalon, 2) + ur2);
    } else {
      // u_m = ‚àö(u_f¬≤ + u_j¬≤ + (EMT/‚àö3)¬≤ + u_r¬≤)
      um = sqrt(uf2 + uj2 + pow((EMT / sqrt(3)), 2) + ur2);
    }
    U = 2 * um; // Facteur de couverture k=2 (niveau de confiance ‚âà 95%)


    // --- Affichage console pour v√©rification
    Serial.println("=== Calcul incertitude ===");
    Serial.printf("Mode : %s\n", mode_incert.c_str());
    Serial.printf("Masse = %.3f g\n", moyenne);
    Serial.printf("u_f = %.6f | u_j = %.3f | u_r = %.6f\n", uf, uj, ur);  //%.3f = trois chiffres apr√®s la virgule
    Serial.printf("u_m = %.6f g | U(k=2) = %.6f g\n", um, U);
    Serial.println("===========================");


    // --- Construction du message JSON √† envoyer vers Node-RED
    String payload = "{\"masse\": " + String(moyenne, 3) +
                     ", \"incertitude\": " + String(um, 6) +
                     ", \"mode\": \"" + mode_incert + "\"}";
    client.publish(topic_pub, payload.c_str()); // Publication MQTT
  } else {
    Serial.println("‚ö†Ô∏è HX711 non pr√™t !");
  }


  delay(500); // Fr√©quence d‚Äô√©chantillonnage (2 mesures par seconde)
}



